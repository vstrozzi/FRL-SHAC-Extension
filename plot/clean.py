import re

# The given tensor output as a string
tensor_output = """
tensor(0.9393, device='cuda:0'), tensor(0.4058, device='cuda:0'), tensor(0.1978, device='cuda:0'), tensor(0.4223, device='cuda:0'), tensor(0.5024, device='cuda:0'), tensor(0.4260, device='cuda:0'), tensor(0.4282, device='cuda:0'), tensor(0.0724, device='cuda:0'), tensor(0.1765, device='cuda:0'), tensor(0.1760, device='cuda:0'), tensor(0.2715, device='cuda:0'), tensor(0.4512, device='cuda:0'), tensor(0.4613, device='cuda:0'), tensor(0.2794, device='cuda:0'), tensor(0.3874, device='cuda:0'), tensor(0.5316, device='cuda:0'), tensor(0.6099, device='cuda:0'), tensor(0.5323, device='cuda:0'), tensor(0.5524, device='cuda:0'), tensor(0.1170, device='cuda:0'), tensor(0.1436, device='cuda:0'), tensor(0.3930, device='cuda:0'), tensor(0.2473, device='cuda:0'), tensor(0.2131, device='cuda:0'), tensor(0.3285, device='cuda:0'), tensor(0.1227, device='cuda:0'), tensor(0.3139, device='cuda:0'), tensor(0.0861, device='cuda:0'), tensor(0.0923, device='cuda:0'), tensor(0.0537, device='cuda:0'), tensor(0.0726, device='cuda:0'), tensor(0.0256, device='cuda:0'), tensor(0.0400, device='cuda:0'), tensor(0.0387, device='cuda:0'), tensor(0.0663, device='cuda:0'), tensor(0.0371, device='cuda:0'), tensor(0.0542, device='cuda:0'), tensor(0.0250, device='cuda:0'), tensor(0.0352, device='cuda:0'), tensor(0.0106, device='cuda:0'), tensor(0.0154, device='cuda:0'), tensor(0.0045, device='cuda:0'), tensor(0.0088, device='cuda:0'), tensor(0.0197, device='cuda:0'), tensor(0.0218, device='cuda:0'), tensor(0.0243, device='cuda:0'), tensor(0.0072, device='cuda:0'), tensor(0.0148, device='cuda:0'), tensor(0.0210, device='cuda:0'), tensor(0.0240, device='cuda:0'), tensor(0.0111, device='cuda:0'), tensor(0.0163, device='cuda:0'), tensor(0.0256, device='cuda:0'), tensor(0.0342, device='cuda:0'), tensor(0.0162, device='cuda:0'), tensor(0.0574, device='cuda:0'), tensor(0.0397, device='cuda:0'), tensor(0.0404, device='cuda:0'), tensor(0.2070, device='cuda:0'), tensor(0.0563, device='cuda:0'), tensor(0.1971, device='cuda:0'), tensor(0.0877, device='cuda:0'), tensor(0.4239, device='cuda:0'), tensor(0.1864, device='cuda:0'), tensor(0.1646, device='cuda:0'), tensor(0.1518, device='cuda:0'), tensor(0.3284, device='cuda:0'), tensor(0.2830, device='cuda:0'), tensor(0.7300, device='cuda:0'), tensor(0.4512, device='cuda:0'), tensor(0.3873, device='cuda:0'), tensor(0.3514, device='cuda:0'), tensor(0.3412, device='cuda:0'), tensor(0.5848, device='cuda:0'), tensor(0.3842, device='cuda:0'), tensor(0.7152, device='cuda:0'), tensor(0.7537, device='cuda:0'), tensor(0.7984, device='cuda:0'), tensor(0.6249, device='cuda:0'), tensor(0.7098, device='cuda:0'), tensor(0.6912, device='cuda:0'), tensor(0.7854, device='cuda:0'), tensor(0.5349, device='cuda:0'), tensor(0.4291, device='cuda:0'), tensor(0.6074, device='cuda:0'), tensor(0.8346, device='cuda:0'), tensor(0.8580, device='cuda:0'), tensor(0.4880, device='cuda:0'), tensor(0.6297, device='cuda:0'), tensor(0.6259, device='cuda:0'), tensor(0.0934, device='cuda:0'), tensor(0.4619, device='cuda:0'), tensor(0.7972, device='cuda:0'), tensor(0.7196, device='cuda:0'), tensor(0.7436, device='cuda:0'), tensor(0.7152, device='cuda:0'), tensor(0.7701, device='cuda:0'), tensor(0.6127, device='cuda:0'), tensor(0.7700, device='cuda:0'), tensor(0.3378, device='cuda:0'), tensor(0.8575, device='cuda:0'), tensor(0.6934, device='cuda:0'), tensor(0.4311, device='cuda:0'), tensor(0.7367, device='cuda:0'), tensor(0.7744, device='cuda:0'), tensor(0.6750, device='cuda:0'), tensor(0.4358, device='cuda:0'), tensor(0.7354, device='cuda:0'), tensor(0.4734, device='cuda:0'), tensor(0.4275, device='cuda:0'), tensor(0.6156, device='cuda:0'), tensor(0.1988, device='cuda:0'), tensor(0.0195, device='cuda:0'), tensor(0.5351, device='cuda:0'), tensor(0.5509, device='cuda:0'), tensor(0.7058, device='cuda:0'), tensor(0.8668, device='cuda:0'), tensor(0.8058, device='cuda:0'), tensor(0.8917, device='cuda:0'), tensor(0.8169, device='cuda:0'), tensor(0.7706, device='cuda:0'), tensor(0.8476, device='cuda:0'), tensor(0.8981, device='cuda:0'), tensor(0.9009, device='cuda:0'), tensor(0.7945, device='cuda:0'), tensor(0.8456, device='cuda:0'), tensor(0.9591, device='cuda:0'), tensor(0.9501, device='cuda:0'), tensor(0.9046, device='cuda:0'), tensor(0.9235, device='cuda:0'), tensor(0.9445, device='cuda:0'), tensor(0.9568, device='cuda:0'), tensor(0.9499, device='cuda:0'), tensor(0.9640, device='cuda:0'), tensor(0.9447, device='cuda:0'), tensor(0.9410, device='cuda:0'), tensor(0.9233, device='cuda:0'), tensor(0.9786, device='cuda:0'), tensor(0.9864, device='cuda:0'), tensor(0.9639, device='cuda:0'), tensor(0.9663, device='cuda:0'), tensor(0.9803, device='cuda:0'), tensor(0.9605, device='cuda:0'), tensor(0.9698, device='cuda:0'), tensor(0.9634, device='cuda:0'), tensor(0.9507, device='cuda:0'), tensor(0.9623, device='cuda:0'), tensor(0.9405, device='cuda:0'), tensor(0.8207, device='cuda:0'), tensor(0.7948, device='cuda:0'), tensor(0.8518, device='cuda:0'), tensor(0.7964, device='cuda:0'), tensor(0.9021, device='cuda:0'), tensor(0.8000, device='cuda:0'), tensor(0.8014, device='cuda:0'), tensor(0.8793, device='cuda:0'), tensor(0.8432, device='cuda:0'), tensor(0.8763, device='cuda:0'), tensor(0.8628, device='cuda:0'), tensor(0.9296, device='cuda:0'), tensor(0.7554, device='cuda:0'), tensor(0.0021, device='cuda:0'), tensor(0.0056, device='cuda:0'), tensor(0.9130, device='cuda:0'), tensor(0.8080, device='cuda:0'), tensor(0.7348, device='cuda:0'), tensor(0.7778, device='cuda:0'), tensor(0.7412, device='cuda:0'), tensor(0.8144, device='cuda:0'), tensor(0.6471, device='cuda:0'), tensor(0.9018, device='cuda:0'), tensor(0.8386, device='cuda:0'), tensor(0.8450, device='cuda:0'), tensor(0.8359, device='cuda:0'), tensor(0.8488, device='cuda:0'), tensor(0.8883, device='cuda:0'), tensor(0.9704, device='cuda:0'), tensor(0.9434, device='cuda:0'), tensor(0.7158, device='cuda:0'), tensor(0.9048, device='cuda:0'), tensor(0.9413, device='cuda:0'), tensor(0.9713, device='cuda:0'), tensor(0.9243, device='cuda:0'), tensor(0.9729, device='cuda:0'), tensor(0.8947, device='cuda:0'), tensor(0.9130, device='cuda:0'), tensor(0.7085, device='cuda:0'), tensor(0.8501, device='cuda:0'), tensor(0.9413, device='cuda:0'), tensor(0.9707, device='cuda:0'), tensor(0.9466, device='cuda:0'), tensor(0.9817, device='cuda:0'), tensor(0.9829, device='cuda:0'), tensor(0.9835, device='cuda:0'), tensor(0.9883, device='cuda:0'), tensor(0.9835, device='cuda:0'), tensor(0.9844, device='cuda:0'), tensor(0.9887, device='cuda:0'), tensor(0.9841, device='cuda:0'), tensor(0.9830, device='cuda:0'), tensor(0.9919, device='cuda:0'), tensor(0.9884, device='cuda:0'), tensor(0.9773, device='cuda:0'), tensor(0.9898, device='cuda:0'), tensor(0.9897, device='cuda:0'), tensor(0.9872, device='cuda:0'), tensor(0.9815, device='cuda:0'), tensor(0.9907, device='cuda:0'), tensor(0.9721, device='cuda:0'), tensor(0.9405, device='cuda:0'), tensor(0.8266, device='cuda:0'), tensor(0.9647, device='cuda:0'), tensor(0.9509, device='cuda:0'), tensor(0.8101, device='cuda:0'), tensor(0.9932, device='cuda:0'), tensor(0.9350, device='cuda:0'), tensor(0.9721, device='cuda:0'), tensor(0.9017, device='cuda:0'), tensor(0.8527, device='cuda:0'), tensor(0.9078, device='cuda:0'), tensor(0.8753, device='cuda:0'), tensor(0.9904, device='cuda:0'), tensor(0.9784, device='cuda:0'), tensor(0.9826, device='cuda:0'), tensor(0.9759, device='cuda:0'), tensor(0.9823, device='cuda:0'), tensor(0.9651, device='cuda:0'), tensor(0.9836, device='cuda:0'), tensor(0.9730, device='cuda:0'), tensor(0.9816, device='cuda:0'), tensor(0.9763, device='cuda:0'), tensor(0.8804, device='cuda:0'), tensor(0.9315, device='cuda:0'), tensor(0.9757, device='cuda:0'), tensor(0.9777, device='cuda:0'), tensor(0.9267, device='cuda:0'), tensor(0.6595, device='cuda:0'), tensor(0.7856, device='cuda:0'), tensor(0.9107, device='cuda:0'), tensor(0.9092, device='cuda:0'), tensor(0.9603, device='cuda:0'), tensor(0.9759, device='cuda:0'), tensor(0.9865, device='cuda:0'), tensor(0.9850, device='cuda:0'), tensor(0.9736, device='cuda:0'), tensor(0.9883, device='cuda:0'), tensor(0.9737, device='cuda:0'), tensor(0.8768, device='cuda:0'), tensor(0.8905, device='cuda:0'), tensor(0.9421, device='cuda:0'), tensor(0.9315, device='cuda:0'), tensor(0.9387, device='cuda:0'), tensor(0.9842, device='cuda:0'), tensor(0.9445, device='cuda:0'), tensor(0.9652, device='cuda:0'), tensor(0.9318, device='cuda:0'), tensor(0.9192, device='cuda:0'), tensor(0.9384, device='cuda:0'), tensor(0.9042, device='cuda:0'), tensor(0.9610, device='cuda:0'), tensor(0.8769, device='cuda:0'), tensor(0.9288, device='cuda:0'), tensor(0.9067, device='cuda:0'), tensor(0.8774, device='cuda:0'), tensor(0.9683, device='cuda:0'), tensor(0.9778, device='cuda:0'), tensor(0.9594, device='cuda:0'), tensor(0.8798, device='cuda:0'), tensor(0.9104, device='cuda:0'), tensor(0.8998, device='cuda:0'), tensor(0.9300, device='cuda:0'), tensor(0.8399, device='cuda:0'), tensor(0.9345, device='cuda:0'), tensor(0.9283, device='cuda:0'), tensor(0.9305, device='cuda:0'), tensor(0.8928, device='cuda:0'), tensor(0.9338, device='cuda:0'), tensor(0.9637, device='cuda:0'), tensor(0.7963, device='cuda:0'), tensor(0.9123, device='cuda:0'), tensor(0.9577, device='cuda:0'), tensor(0.9571, device='cuda:0'), tensor(0.9113, device='cuda:0'), tensor(0.9535, device='cuda:0'), tensor(0.9400, device='cuda:0'), tensor(0.9404, device='cuda:0'), tensor(0.9708, device='cuda:0'), tensor(0.9744, device='cuda:0'), tensor(0.9608, device='cuda:0'), tensor(0.9449, device='cuda:0'), tensor(0.7874, device='cuda:0'), tensor(0.9017, device='cuda:0'), tensor(0.9135, device='cuda:0'), tensor(0.8651, device='cuda:0'), tensor(0.9022, device='cuda:0'), tensor(0.9438, device='cuda:0'), tensor(0.9702, device='cuda:0'), tensor(0.8969, device='cuda:0'), tensor(0.9275, device='cuda:0'), tensor(0.9528, device='cuda:0'), tensor(0.9041, device='cuda:0'), tensor(0.9229, device='cuda:0'), tensor(0.9334, device='cuda:0'), tensor(0.9689, device='cuda:0'), tensor(0.9835, device='cuda:0'), tensor(0.9680, device='cuda:0'), tensor(0.9736, device='cuda:0'), tensor(0.9815, device='cuda:0'), tensor(0.9791, device='cuda:0'), tensor(0.9729, device='cuda:0'), tensor(0.9664, device='cuda:0'), tensor(0.9671, device='cuda:0'), tensor(0.9798, device='cuda:0'), tensor(0.9457, device='cuda:0'), tensor(0.9411, device='cuda:0'), tensor(0.9362, device='cuda:0'), tensor(0.8877, device='cuda:0'), tensor(0.8123, device='cuda:0'), tensor(0.8701, device='cuda:0'), tensor(0.8789, device='cuda:0'), tensor(0.7566, device='cuda:0'), tensor(0.8752, device='cuda:0'), tensor(0.8759, device='cuda:0'), tensor(0.8318, device='cuda:0'), tensor(0.7104, device='cuda:0'), tensor(0.7074, device='cuda:0'), tensor(0.6986, device='cuda:0'), tensor(0.8246, device='cuda:0'), tensor(0.6408, device='cuda:0'), tensor(0.5313, device='cuda:0'), tensor(0.9000, device='cuda:0'), tensor(0.8306, device='cuda:0'), tensor(0.8318, device='cuda:0'), tensor(0.8556, device='cuda:0'), tensor(0.9278, device='cuda:0'), tensor(0.8843, device='cuda:0'), tensor(0.8821, device='cuda:0'), tensor(0.8348, device='cuda:0'), tensor(0.8183, device='cuda:0'), tensor(0.8055, device='cuda:0'), tensor(0.6603, device='cuda:0'), tensor(0.6964, device='cuda:0'), tensor(0.5568, device='cuda:0'), tensor(0.4577, device='cuda:0'), tensor(0.6446, device='cuda:0'), tensor(0.6055, device='cuda:0'), tensor(0.6335, device='cuda:0'), tensor(0.7612, device='cuda:0'), tensor(0.5522, device='cuda:0'), tensor(0.6500, device='cuda:0'), tensor(0.5678, device='cuda:0'), tensor(0.6324, device='cuda:0'), tensor(0.4928, device='cuda:0'), tensor(0.3715, device='cuda:0'), tensor(0.1706, device='cuda:0'), tensor(0.4821, device='cuda:0'), tensor(0.1245, device='cuda:0'), tensor(0.2134, device='cuda:0'), tensor(0.0522, device='cuda:0'), tensor(0.0999, device='cuda:0'), tensor(0.0123, device='cuda:0'), tensor(0.2460, device='cuda:0'), tensor(0.0653, device='cuda:0'), tensor(0.0567, device='cuda:0'), tensor(0.0582, device='cuda:0'), tensor(0.1806, device='cuda:0'), tensor(0.3676, device='cuda:0'), tensor(0.1841, device='cuda:0'), tensor(0.0090, device='cuda:0'), tensor(0.1339, device='cuda:0'), tensor(0.4798, device='cuda:0'), tensor(0.3077, device='cuda:0'), tensor(0.4881, device='cuda:0'), tensor(0.1836, device='cuda:0'), tensor(0.6228, device='cuda:0'), tensor(0.4039, device='cuda:0'), tensor(0.2976, device='cuda:0'), tensor(0.5570, device='cuda:0'), tensor(0.5509, device='cuda:0'), tensor(0.6509, device='cuda:0'), tensor(0.6084, device='cuda:0'), tensor(0.7816, device='cuda:0'), tensor(0.8315, device='cuda:0'), tensor(0.8126, device='cuda:0'), tensor(0.4997, device='cuda:0'), tensor(0.6450, device='cuda:0'), tensor(0.3808, device='cuda:0'), tensor(0.3499, device='cuda:0'), tensor(0.3979, device='cuda:0'), tensor(0.6441, device='cuda:0'), tensor(0.4861, device='cuda:0'), tensor(0.5948, device='cuda:0'), tensor(0.6826, device='cuda:0'), tensor(0.4717, device='cuda:0'), tensor(0.3508, device='cuda:0'), tensor(0.4650, device='cuda:0'), tensor(0.5205, device='cuda:0'), tensor(0.3676, device='cuda:0'), tensor(0.2217, device='cuda:0'), tensor(0.1023, device='cuda:0'), tensor(0.0471, device='cuda:0'), tensor(0.2527, device='cuda:0'), tensor(0.0707, device='cuda:0'), tensor(0.0855, device='cuda:0'), tensor(0.1273, device='cuda:0'), tensor(0.3517, device='cuda:0'), tensor(0.2125, device='cuda:0'), tensor(0.2246, device='cuda:0'), tensor(0.2585, device='cuda:0'), tensor(0.2859, device='cuda:0'), tensor(0.3248, device='cuda:0'), tensor(0.2345, device='cuda:0'), tensor(0.1293, device='cuda:0'), tensor(0.3176, device='cuda:0'), tensor(0.2809, device='cuda:0'), tensor(0.1550, device='cuda:0'), tensor(0.2056, device='cuda:0'), tensor(0.1589, device='cuda:0'), tensor(0.2317, device='cuda:0'), tensor(0.1181, device='cuda:0'), tensor(0.2277, device='cuda:0'), tensor(0.3664, device='cuda:0'), tensor(0.5620, device='cuda:0'), tensor(0.1126, device='cuda:0'), tensor(0.1116, device='cuda:0'), tensor(0.2633, device='cuda:0'), tensor(0.1314, device='cuda:0'), tensor(0.3180, device='cuda:0'), tensor(0.2692, device='cuda:0'), tensor(0.3553, device='cuda:0'), tensor(0.1390, device='cuda:0'), tensor(0.4569, device='cuda:0'), tensor(0.2193, device='cuda:0'), tensor(0.4500, device='cuda:0'), tensor(0.2743, device='cuda:0'), tensor(0.1250, device='cuda:0'), tensor(0.1366, device='cuda:0'), tensor(0.1365, device='cuda:0'), tensor(0.1523, device='cuda:0'), tensor(0.1782, device='cuda:0'), tensor(0.1544, device='cuda:0'), tensor(0.1869, device='cuda:0'), tensor(0.3017, device='cuda:0'), tensor(0.2298, device='cuda:0'), tensor(0.4830, device='cuda:0'), tensor(0.2662, device='cuda:0'), tensor(0.0927, device='cuda:0'), tensor(0.1479, device='cuda:0'), tensor(0.2206, device='cuda:0'), tensor(0.1748, device='cuda:0'), tensor(0.3107, device='cuda:0'), tensor(0.0530, device='cuda:0'), tensor(0.4301, device='cuda:0'), tensor(0.2052, device='cuda:0'), tensor(0.1048, device='cuda:0'), tensor(0.2262, device='cuda:0'), tensor(0.2613, device='cuda:0'), tensor(0.5452, device='cuda:0'), tensor(0.2214, device='cuda:0'), tensor(0.3245, device='cuda:0'), tensor(0.0607, device='cuda:0'), tensor(0.0305, device='cuda:0'), tensor(0.1483, device='cuda:0'), tensor(0.3121, device='cuda:0'), tensor(0.1402, device='cuda:0'), tensor(0.2735, device='cuda:0'), tensor(0.2289, device='cuda:0'), tensor(0.2095, device='cuda:0'), tensor(0.1618, device='cuda:0'), tensor(0.2392, device='cuda:0'), tensor(0.0628, device='cuda:0'), tensor(0.2349, device='cuda:0'), tensor(0.0712, device='cuda:0'), tensor(0.2610, device='cuda:0'), tensor(0.2571, device='cuda:0'), tensor(0.4288, device='cuda:0'), tensor(0.1637, device='cuda:0'), tensor(0.3136, device='cuda:0'), tensor(0.3053, device='cuda:0'), tensor(0.1002, device='cuda:0'), tensor(0.1582, device='cuda:0'), tensor(0.2231, device='cuda:0'), tensor(0.1040, device='cuda:0'), tensor(0.1923, device='cuda:0'), tensor(0.1058, device='cuda:0'), tensor(0.1028, device='cuda:0'), tensor(0.1076, device='cuda:0'), tensor(0.0407, device='cuda:0'), tensor(0.2111, device='cuda:0'), tensor(0.1286, device='cuda:0'), tensor(0.2190, device='cuda:0'), tensor(0.1902, device='cuda:0'), tensor(0.3569, device='cuda:0'), tensor(0.2507, device='cuda:0'), tensor(0.0913, device='cuda:0'), tensor(0.0511, device='cuda:0'), tensor(0.1488, device='cuda:0'), tensor(0.2378, device='cuda:0'), tensor(0.0767, device='cuda:0'), tensor(0.1795, device='cuda:0')
"""

# Regular expression to find all floating point numbers
values = re.findall(r'tensor\(([\d\.]+), device=\'cuda:0\'\)', tensor_output)

# Convert the extracted values to floats
values = [float(value) for value in values]

print(values)
